[{
    "id" : 11,
    "name" : "Promises",
    "tag": "JavaScript",
    "description" : "Promise is an object which represent eventual completion or failure of an asynchronus operation and its value. \nPromise has 3 states pending, fulfilled, rejected.\nPromise has few static methods \n1.Promise.all() 2.Promise.allSettled() 3.Promise.any()"
},
{
    "id" : 12,
    "name" : "Closures",
    "tag": "JavaScript",
    "description" : "Closure is function inside another function which has access to its outer scope variables or outer functions variables"
},
{
    "id" : 13,
    "name" : "Async/Await",
    "tag": "JavaScript",
    "description" : "The async keyword transforms a regular JavaScript function into an asynchronous function, causing it to return a Promise. The await keyword is used inside an async function to pause its execution and wait for a Promise to resolve before continuing"
},
{
    "id" : 21,
    "name" : "Observables",
    "tag": "RxJs",
    "description" : "An Observable is a function that converts the ordinary stream of data into an Observable stream of data. You can think of Observable as a wrapper around the Ordinary stream of data."
},
{
    "id" : 31,
    "name" : "Palindrome Number",
    "tag": "DSA",
    "description" : "An Integer is palindrom when it reads same forward and backword."
},
{
    "id" : 32,
    "name" : "Unique Character String",
    "tag": "DSA",
    "description" : "Use of 'for of' and 'for loop' to find count of characters and first unique character from a string"
},
{
    "id" : 33,
    "name" : "Fibonacci series",
    "tag": "DSA",
    "description" : "Fibonacci series 0, 1, 1, 2, 3, 5, 8, 13 , 21..... \n how to ind Fibonacci number on given position \n Use of F(n) = F(n-1)+F(n-2) to find fibonacci number"
},
{
    "id" : 34,
    "name" :   "Recursion",
    "tag": "DSA",
    "description" : "A function which calls itself withing its body is called recursion"
},
{
    "id" : 35,
    "name" :   "Anagram",
    "tag": "DSA",
    "description" : "Anagram is word or phrase which is formed by rearranging letters of another word or phrase"
},
{
    "id" : 36,
    "name" :   "Two Sum (Brute force solution)",
    "tag": "DSA",
    "description" : "Given an array of integers nums and an integer target, return index of the two numbers such that they add up to target."
},
{
    "id" : 37,
    "name" :   "Best Time to Buy and Sell Stock",
    "tag": "DSA",
    "description" : "You are given an array prices where prices[i] is the price of a given stock on the ith day.You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0"
},
{
    "id" : 41,
    "name" : "Resolve Route Angular",
    "tag" : "Angular",
    "description" : "The Angular Resolve route guard or Angular Resolvers allow us to load some data before we navigate to a Route. The Resolve route guard pre fetches the data before navigating to the route. Hence the component is rendered along with the data"

},
{
    "id" : 38,
    "name" : "Find Single missing number from given numbers in array",
    "tag" : "DSA",
    "description" : "This method will return missing value from array if only single number is missing from given sequence in array of elements. use formula l1 = arr.length, summOfFirstN = (l1 * (l1+1))/2, and then subtract it from some of array elements"

}   
]